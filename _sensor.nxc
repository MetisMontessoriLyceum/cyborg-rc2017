/**
 * Team cyborg++ [rc2017]
 * Copyright (C) 2017  Metis Montessori Lyceum
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

byte sens[2];
byte sensOuter[2];
byte sensBumper[4];
byte mode;

void SensorSplitterSetMode (byte port, byte subport, byte mode) {
  // built the request
  byte request[];
  ArrayBuild(request, subport, 0x52, mode);

  // wait until the splitter is ready
  byte ready = 0;
  until(I2CStatus(port, ready) != STAT_COMM_PENDING);

  // write it
  I2CWrite(port, 0, request);
}

byte SensorSplitter (byte port, byte subport) {
  // built the request
  byte request[];
  ArrayBuild(request, subport, 0x54);

  // wait until the splitter is ready
  byte ready = 0;
  until(I2CStatus(port, ready) != STAT_COMM_PENDING);

  // read the sensor values
  int count = 2;
  int sensorValue = 0;
  unsigned byte buf[1];
  if(I2CBytes(port, request, count, buf)) {
    sensorValue = buf[0];// + (buf[1]<<8);
  }
  else {
    PlayTone(139,200);
    Move(0,0);
    ClearScreen();
    TextOut(0,LCD_LINE1,"Please reconnect");
    TextOut(0,LCD_LINE2,"port " + NumToStr(port + 1) + "...       ");
    TextOut(0,LCD_LINE3,"----------------");
    TextOut(0,LCD_LINE4,"ERROR: I2C read ");
    TextOut(0,LCD_LINE5,"failed          ");
    until(I2CBytes(port, request, count, buf));
    ClearScreen();
  }
  return sensorValue;
}

byte SensorHTSmartColor (byte sensPort) {
  byte colorNum;
  byte red;
  byte green;
  byte blue;
  ReadSensorHTColor(sensPort, colorNum, red, green, blue);

  if (red == 255 && green == 255 && red == 255) {
    return COLOR_REFLECTIVE;
  } if (red < 50 && green < 50 && blue < 50) {
    return COLOR_BLACK;
  } else {
    return COLOR_WHITE;
  }
}

byte ReadSens (byte sensorID) {
  byte rawValue;
  switch (sensorID) {
    case SENS_OUTER_LEFT:
      rawValue = SensorHTSmartColor(SENS_PORT_OUTER_LEFT);
      break;
    case SENS_LEFT:
      rawValue = SensorSplitter(SENS_PORT_LEFT);
      break;
    case SENS_RIGHT:
      rawValue = SensorSplitter(SENS_PORT_RIGHT);
      break;
    case SENS_OUTER_RIGHT:
      rawValue = SensorSplitter(SENS_PORT_OUTER_RIGHT);
      break;
  }

  // TODO: This switch statement makes use of fallthrou and is therefor
  // unreadable.
  switch (sensorID) {
    case SENS_OUTER_LEFT:
      return rawValue;
    case SENS_LEFT:
    case SENS_RIGHT:
      if (mode == MODE_GRAYSCALE) {
        if (rawValue < 15) {
          return COLOR_BLACK;
        } else {
          return COLOR_WHITE;
        }
      } // if this is not true, it executes the code below in the outer right
        // case.
    case SENS_OUTER_RIGHT:
      return rawValue;
  }
}

void SetMode (byte newMode) {
  mode = newMode;
  SensorSplitterSetMode(SENS_PORT_LEFT, newMode);
  SensorSplitterSetMode(SENS_PORT_RIGHT, newMode);
}

void ToggleMode () {
  if (mode == MODE_GRAYSCALE) {
    SetMode(MODE_COLOR);
  } else {
    SetMode(MODE_GRAYSCALE);
  }
}
