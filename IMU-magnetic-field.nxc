/************************************************************************/
/*                                                                      */
/* Program Name: IMU-magnetic-field.nxc */
/* ===========================                                          */
/*                                                                      */
/* Copyright (c) 2012 by mindsensors.com                                */
/* Email: info (<at>) mindsensors (<dot>) com                           */
/*                                                                      */
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; version 3 of the License.              */
/* Read the license at: http://www.gnu.org/licenses/gpl.txt             */
/*                                                                      */
/************************************************************************/
/*
 * When        Who             Comments
 * 09/06/12    Deepak Patil    Initial authoring
 */
const byte SensorPort  =  IN_1;
#define ADDR     0x22

#include "IMU-lib.nxc"

int cb, cb_old;

task button_handler()
{
  while (true) {
  
     if ( ButtonPressed(BTNCENTER, true) ) {
         while (ButtonPressed(BTNCENTER, true)) ;            //debounce the switch
      if ( cb >= 4 ) {
			  cb = 0;
		  } else {
			  cb ++;
			}
    }

    Wait(100);   // don't hog the CPU.
  }// end of while
}

void IMU_Readb1b2(byte port, byte i2cAddr)
{
  byte message[];
  byte buf[12];
  int count;
  byte nByteReady = 0;
  string msg, b1, b2;

  SetSensorLowspeed(port);

	msg = "                  ";
  ArrayBuild(message, i2cAddr, 0x45);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
  count = 2;
  if(I2CBytes(port, message, count, buf)) {
    b1 = NumToStr(buf[0]);
    msg = StrReplace(msg, 2, b1);
    b2 = NumToStr(buf[1]);
    msg = StrReplace(msg, 6, b2);
    TextOut(0, LCD_LINE6, msg, false);
	}
}

task main()
{
  string msg;
  accl currAccl;
  magnetic_field currMF;
  gyro currGyro;
  string mx, my, mz;
	byte b;
	int a;
	int heading;

	cb = 0;
	cb_old = 1;
	StartTask(button_handler);
	a = 0;

	IMU_Init(SensorPort);
  
  while (true ) {

		/*
		 * read the values from the sensor.
		 */
    IMU_ReadMagneticField(SensorPort, ADDR, currMF);

    msg = "Change near by ";
    TextOut(0, LCD_LINE1, msg, false);
    msg = "magnetic field  ";
    TextOut(0, LCD_LINE2, msg, false);

    msg = "Field (mgauss):";
    TextOut(0, LCD_LINE3, msg, false);

		msg = "X: ";
    mx = NumToStr(currMF.mx);
    msg += mx;
		msg += "     ";
    TextOut(0, LCD_LINE4, msg, false);

		msg = "Y: ";
    my = NumToStr(currMF.my);
    msg += my;
		msg += "     ";
    TextOut(0, LCD_LINE5, msg, false);

    msg = "Z: ";
    mz = NumToStr(currMF.mz);
    msg += mz;
		msg += "     ";
    TextOut(0, LCD_LINE6, msg, false);

		heading = IMU_ReadCompassHeading(SensorPort, ADDR);

    msg = "Heading: ";
    msg += NumToStr(heading);
		msg += "   ";
    TextOut(0, LCD_LINE7, msg, false);
    Wait(50);
  }

}
