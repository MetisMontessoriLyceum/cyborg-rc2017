/**
 * Team cyborg++ [rc2017]
 * Copyright (C) 2017  Metis Montessori Lyceum
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "_defines.nxc"
#include "_move.nxc"
#include "_sensor.nxc"
#include "_debug.nxc"
#include "_generic.nxc"

#include "_obstacle.nxc"
#include "_ballField.nxc"

long greenMrc = 0;

void GreenMove (bool dir) {
  RotateMotor(MOTOR_BOTH, -NORMAL_SPEED, 300);
  Move(0,0);

  ResetRotationCount(MOTOR_LEFT);
  Wait(1);
  MoveDir(dir, MOVE_INNER);
  until (abs(MotorRotationCount(MOTOR_LEFT)) > 700);
  Move(0,0);

  MoveDir(!dir, MOVE_INNER);
  WaitForColor(dir, COLOR_BLACK);

  MoveDir(dir, MOVE_INNER);
  until(Update() && Debug() && sens[dir] != COLOR_BLACK);
  Move(0,0);
}

void OuterMove (bool dir) {
  RotateMotor(MOTOR_BOTH, -NORMAL_SPEED, 150);
  Move(0,0);

  MoveDir(dir, MOVE_INNER);
  until(Update() && Debug() && (sens[!dir] == COLOR_BLACK || sensOuter[!dir] == COLOR_BLACK));
  MoveDir(!dir, MOVE_INNER);
  if (sens[!dir] == COLOR_BLACK) {
    until(Update() && Debug() && sens[!dir] != COLOR_BLACK);
  }
}

void AvoidObstacle () {
  byte dir;
  if (SensorUS(SENS_PORT_DIST_US) < 60) {
    dir = RIGHT;
  } else {
    dir = LEFT;
  }

  MoveRot(100, MOVE_BACKWARD);
  MoveDirRot(dir, 450, MOVE_INNER);
  FollowWall(!dir, STOP_ON_LINE);
  Move(0,0);
  MoveRot(200, MOVE_FORWARD);
  MoveDir(dir, MOVE_INNER);
  until(Update() && sens[dir] == COLOR_BLACK);
  Move(0,0);
}

void FollowLine () {
  if (sensBumper[CENTER]) {
    AvoidObstacle();
  }

  bool shouldTrustGreen = false;
  if (mode == MODE_COLOR) {
    long mrc = abs(MotorRotationCount(MOTOR_LEFT));
    if (sens[LEFT] == COLOR_GREEN || sens[RIGHT] == COLOR_GREEN) {
      if (greenMrc == 0) greenMrc = mrc;
      } else {
        greenMrc = 0;
      }
      shouldTrustGreen = greenMrc != 0
          && (mrc - greenMrc < -10 || mrc - greenMrc > 10);
  }

  if (shouldTrustGreen && sens[LEFT] == COLOR_GREEN) {
    VisualDebug(VDEBUG_GREEN_LEFT);
    GreenMove(LEFT);
  } else if (shouldTrustGreen && sens[RIGHT] == COLOR_GREEN) {
    VisualDebug(VDEBUG_GREEN_RIGHT);
    GreenMove(RIGHT);
  }

  else if (sensOuter[LEFT] == COLOR_BLACK) {
    VisualDebug(VDEBUG_OUTER_LEFT);
    OuterMove(LEFT);
  } else if (sensOuter[RIGHT] == COLOR_BLACK) {
    VisualDebug(VDEBUG_OUTER_RIGHT);
    OuterMove(RIGHT);
  }

  else if (sens[LEFT] == COLOR_BLACK && sens[RIGHT] == COLOR_BLACK) {
    VisualDebug(VDEBUG_FORWARD);
    Move(MOVE_FORWARD);
  } else if (sens[LEFT] == COLOR_BLACK) {
    VisualDebug(VDEBUG_LEFT);
    Move(MOVE_LEFT);
  } else if (sens[RIGHT] == COLOR_BLACK) {
    VisualDebug(VDEBUG_RIGHT);
    Move(MOVE_RIGHT);
  }

  else {
    VisualDebug(VDEBUG_FORWARD);
    Move(MOVE_FORWARD);
  }
}

task main () {
  Setup();
  while (Update()) {
    Debug();
    if (sensOuter[LEFT] == COLOR_REFLECTIVE) break;
    FollowLine();
    ToggleMode();
  }
  Move(0,0);

  BallRoutine();
}
