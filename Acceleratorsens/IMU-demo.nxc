/************************************************************************/
/*                                                                      */
/* Program Name: IMU-demo.nxc */
/* ===========================                                          */
/*                                                                      */
/* Copyright (c) 2012 by mindsensors.com                                */
/* Email: info (<at>) mindsensors (<dot>) com                           */
/*                                                                      */
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; version 3 of the License.              */
/* Read the license at: http://www.gnu.org/licenses/gpl.txt             */
/*                                                                      */
/************************************************************************/
/*
 * When        Who             Comments
 * 04/19/12    Deepak Patil    Adapted from ACCL file.
 */
const byte SensorPort  =  IN_1;
#define ADDR     0x22

#include "IMU-lib.nxc"

int cb, cb_old;

string i2cReadString(byte prt, byte adr, byte reg, byte cnt)
{
  byte outbuf[];
  byte cmdbuf[];
  string temp = "";

  ArrayBuild(cmdbuf, adr, reg);
  byte nByteReady = 0;
  while (I2CStatus(prt, nByteReady) ==  STAT_COMM_PENDING)
  {
  // Wait for I2C bus to be ready
  }

  if(I2CBytes(prt, cmdbuf, cnt, outbuf))
  {
    temp = ByteArrayToStr(outbuf);
  }
  return temp;
}


task button_handler()
{
  while (true) {

     if ( ButtonPressed(BTNCENTER, true) ) {
         while (ButtonPressed(BTNCENTER, true)) ;            //debounce the switch
      if ( cb >= 4 ) {
			  cb = 0;
		  } else {
			  cb ++;
			}
    }

    Wait(100);   // don't hog the CPU.
  }// end of while
}

void IMU_Readb1b2(byte port, byte i2cAddr)
{
  byte message[];
  byte buf[12];
  int count;
  byte nByteReady = 0;
  string msg, b1, b2;

  SetSensorLowspeed(port);

	msg = "                  ";
  ArrayBuild(message, i2cAddr, 0x45);
  while (I2CStatus(port, nByteReady) ==  STAT_COMM_PENDING);
  count = 2;
  if(I2CBytes(port, message, count, buf)) {
    b1 = NumToStr(buf[0]);
    msg = StrReplace(msg, 2, b1);
    b2 = NumToStr(buf[1]);
    msg = StrReplace(msg, 6, b2);
    TextOut(0, LCD_LINE6, msg, false);
	}
}

task motor() {
  until(!ButtonPressed(BTNCENTER,false));
  until(ButtonPressed(BTNCENTER,false));
  // OnFwd(OUT_A, 75);
  RotateMotor(OUT_A, 15, 90);
  /*MotorRotationCount(byte output)*/
}

task main()
{
  start motor;

  string msg;
  accl currAccl;
  gyro currGyro;
  string ax, ay, az, tx, ty, tz, gx, gy, gz;
	byte b;
	int a;
	int heading;

	cb = 0;
	cb_old = 1;
	StartTask(button_handler);
	a = 0;

	IMU_Init(SensorPort);

  while (true ) {

		if ( cb_old != cb ) {
			switch (cb) {
			case 0:
				TextOut(0, LCD_LINE1, "G LEVEL: 2 G   ", false);
				IMU_SendCommand(SensorPort, ADDR, '1');
				break;
			case 1:
				TextOut(0, LCD_LINE1, "G LEVEL: 4 G   ", false);
				IMU_SendCommand(SensorPort, ADDR, '2');
				break;
			case 2:
				TextOut(0, LCD_LINE1, "G LEVEL: 8 G   ", false);
				IMU_SendCommand(SensorPort, ADDR, '3');
				break;
			case 3:
				TextOut(0, LCD_LINE1, "G LEVEL: 16.0 G   ", false);
				IMU_SendCommand(SensorPort, ADDR, '4');
				break;
			}
		  cb_old = cb;
			Wait(100);
		}
		/*
		 * read the values from the sensor.
		 */
    IMU_ReadAcceleration(SensorPort, ADDR, currAccl);
    IMU_ReadGyro(SensorPort, ADDR, currGyro);

    msg = "OrngBtn chnge G";
    TextOut(0, LCD_LINE2, msg, false);
    msg = "  Accl Tilt Gyro";
    TextOut(0, LCD_LINE3, msg, false);
    msg = "X:            ";
    ax = NumToStr(currAccl.ax);
    msg = StrReplace(msg, 2, ax);
    tx = NumToStr(currAccl.tx);
    msg = StrReplace(msg, 7, tx);
    gx = NumToStr(currGyro.gx);
    msg = StrReplace(msg, 12, gx);
    TextOut(0, LCD_LINE4, msg, false);

    msg = "Y:            ";
    ay = NumToStr(currAccl.ay);
    msg = StrReplace(msg, 2, ay);
    ty = NumToStr(currAccl.ty);
    msg = StrReplace(msg, 7, ty);
    gy = NumToStr(currGyro.gy);
    msg = StrReplace(msg, 12, gy);
    TextOut(0, LCD_LINE5, msg, false);

    msg = "Z:            ";
    az = NumToStr(currAccl.az);
    msg = StrReplace(msg, 2, az);
    tz = NumToStr(currAccl.tz);
    msg = StrReplace(msg, 7, tz);
    gz = NumToStr(currGyro.gz);
    msg = StrReplace(msg, 12, gz);
    TextOut(0, LCD_LINE6, msg, false);

		heading = IMU_ReadCompassHeading(SensorPort, ADDR);

    msg = "heading: ";
    az = NumToStr(heading);
    msg += az;
		msg += "   ";
    TextOut(0, LCD_LINE7, msg, false);
    msg = "f:";
    msg += NumToStr(IMU_ReadFilter(SensorPort, ADDR));
		msg += " vrn: ";
		msg += i2cReadString(SensorPort, ADDR, 0x00, 8);
		msg += "         ";
    TextOut(0, LCD_LINE8, msg, false);
    Wait(50);
  }

}
